#!/usr/bin/env perl
use strict;
use warnings;
use Net::Stomp::MooseHelpers::ReadTrace;
use Net::Stomp::Producer;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use Time::HiRes 'sleep';

my ($trace_basedir,$host,$port,$time_divisor)=
    (getcwd(),'localhost',61613,1);
my ($help,$verbose,$pretend);

GetOptions(
    'tracedir|d=s' => \$trace_basedir,
    'host|h=s' => \$host,
    'port|p=i' => \$port,
    'divisor|t=f' => \$time_divisor,
    'pretend|P' => \$pretend,
    'verbose|v' => \$verbose,
    'help|h' => \$help,
) or pod2usage(
    -msg=>'bad options',
    -exitval=>2,
    -verbose=>2,
);
pod2usage(
    -exitval => 0,
    -verbose => 1,
) if $help;
$time_divisor ||= 1; # 0 would be a bad divisor

my $reader = Net::Stomp::MooseHelpers::ReadTrace->new({
    trace_basedir => $trace_basedir,
});
my $sender = Net::Stomp::Producer->new({
    servers => [ { hostname => $host, port => $port } ],
});

print "Reading from $trace_basedir\n" if $verbose;

my @file_names= $reader->sorted_filenames();
unless (@file_names) {
    warn "No frames found under $trace_basedir!\n";
}

my $current_timestamp;

for my $file_name (@file_names) {

    my ($this_timestamp) = ($file_name =~ m{\A(\d+\.\d+)-});
    if ($current_timestamp) {
        my $original_delay = $this_timestamp - $current_timestamp;
        my $desired_delay = $original_delay / $time_divisor;
        if ($desired_delay > 0) {
            sleep($desired_delay);
        }
    }
    $current_timestamp = $this_timestamp;

    my $frame = $reader->read_frame_from_filename($file_name);

    if ($frame->command ne 'MESSAGE') {
        warn "Skipping $file_name, it's not a received message\n";
        next;
    }

    if ($pretend) {
        print "Pretend sending $file_name\n";
    }
    else {
        print "Sending $file_name\n" if $verbose;

        $sender->send(
            undef, # no need to override the destination
            $frame->headers,
            $frame->body,
        );
    }
}
